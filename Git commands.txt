Git commands
1.	cd : d:\ “filename”
2.	git init                                	Creates new git repository
3.	git add --all					Add all to staging 
4.	git commit  -m ”Message”			commit with message
5.	git commit -a -m “Message”			commit all with message
6.	git log 						see the log
7.	git log --oneline					see the log in one line
8.	git commit -m “NewMessage” --amend 		amend the last commit’s message
9. 	rm -r -fo .git					delete the current git

Git Branches
1.	git branch *NewBranch				Setup a NewBranch
2.	git branch 						look at existing branches
3.	git switch *BranchName 				switch to the new branch
4. 	git merge -m "Message" *RemoteBranch	merge RemoteBranch with current branch 
5. 	git branch -d *branchName 			delete the branch with branchName
### What if Master Branch changes when other branches are being changed?
First make changes on both (or more) branches
1.	when merging, conflicts will raise
2. 	open the source file, the comparison will show in file, go into master comparison 
3. 	Manually resolve the conflicts, go back into main

Github 
1.	git remote add *origin *url 			Adds local repo to remote repo with *url, this connection is named "*origin" 
2. 	git branch -M main				Sets the target branch to main			
4. 	git pull origin main --allow-unrelated-histories 	commit two unrelated files (Used when readme already created, pull first then push)
3. 	git push -u origin main				push all things in the current local branch to remote	
4.	git push --all					push all branches in the current local repo to roemote 
4. 	git fetch						fetch all the remote changes into local repo
5. 	git merge						merge all the remote changes with local repo
or Just, insted of the two above
6.	git pull						pull all changes and merge in the local repo

assigning issues, make new branches, ask for pull requests(merge into original) comes in sequence
pull requests: ask for the main to pull your changes 
